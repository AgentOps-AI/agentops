function adjustAPIKey() {
  // uncomment if you'd like to see this without delay, purely for testing
  // const apiKey = "BOOGLYWOOGLY";
  // patternFindAndAdjust(apiKey);

  fetch("https://api.agentops.ai/placeholder/API-key")
    .then((response) => response.json())
    .then((data) => {
        const apiKey = data.apiKey;
        patternFindAndAdjust(apiKey);
        if (!data.hasKey) {
          // no API key, new rate-limited one is generated by endpoint?
          // option to display a notice that the API key is rate-limited here?

        }
    })
    .catch((error) => {
      // console.error("API Key pull error:", error);
      // just for testing, comment out later
      const apiKey = "BOOGLYWOOGLY";
      patternFindAndAdjust(apiKey);
    });
}

function patternFindAndAdjust(apiKey) {
  const elementsWithPatterns = Array.from(document.getElementsByClassName("adjust-api-key"));

  const apiKeyPattern = /AGENTOPS_API_KEY/g;
  const tokenOperatorPattern1 = /<span class="token operator">&lt;<\/span>YOUR API KEY<span class="token operator">&gt;<\/span>/g;
  const tokenOperatorPattern2 = /<span class="token operator">&lt;<\/span>INSERT YOUR API KEY HERE<span class="token operator">&gt;<\/span>/g;

  // Process the collected elements
  elementsWithPatterns.forEach(element => {
    console.log(element.textContent)
    const containsApiKeyPattern = element.textContent.includes("AGENTOPS_API_KEY");
    const containsTokenOperatorPattern1 = element.textContent.includes("<YOUR API KEY>");
    const containsTokenOperatorPattern2 = element.textContent.includes("<INSERT YOUR API KEY HERE>");

    if (containsTokenOperatorPattern1 || containsTokenOperatorPattern2) {
      element.innerHTML = element.innerHTML.replace(tokenOperatorPattern1, apiKey).replace(tokenOperatorPattern2, apiKey);
    } else if (containsApiKeyPattern) {
      element.innerHTML = element.innerHTML.replace(apiKeyPattern, apiKey);
    }
    element.className = "adjusted-api-key";
  });
}

// Note that functions cannot be named the same thing across script files if copy-pasting this to add new scripts
function addAPIEventListeners() { // would change to button
  console.log("new listeners added")
  document.querySelectorAll('li, a').forEach(element => {
    // this can instead add a button before the "adjust-api-key" span that when clicked adjusts the API key
    element.addEventListener('click', () => {
      setTimeout(adjustAPIKey, 50);
    });
  });
}

window.addEventListener('load', function() {
  // addAPIEventListeners();
  // const apiObserver = new MutationObserver(addAPIEventListeners);
  // apiObserver.observe(document.body, { childList: true, subtree: true });
  // adjustAPIKey(); // this can be removed if turned into a button that calls this
});